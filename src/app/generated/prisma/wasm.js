
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  email: 'email',
  address: 'address',
  phone: 'phone',
  subscribedUntil: 'subscribedUntil',
  isSubscribed: 'isSubscribed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  isOwner: 'isOwner',
  role: 'role',
  username: 'username',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  membershipCode: 'membershipCode',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  birthday: 'birthday',
  lastPurchaseAt: 'lastPurchaseAt',
  membershipExpiredAt: 'membershipExpiredAt',
  points: 'points',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscountScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  code: 'code',
  name: 'name',
  description: 'description',
  type: 'type',
  value: 'value',
  validFrom: 'validFrom',
  validTo: 'validTo',
  minPurchase: 'minPurchase',
  maxDiscount: 'maxDiscount',
  applicableItems: 'applicableItems',
  rewardType: 'rewardType',
  isMemberOnly: 'isMemberOnly',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  orderNo: 'orderNo',
  grandTotal: 'grandTotal',
  subtotal: 'subtotal',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  remainingBalance: 'remainingBalance',
  change: 'change',
  taxAmount: 'taxAmount',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  orderStatus: 'orderStatus',
  paymentDate: 'paymentDate',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId',
  customerName: 'customerName',
  discountId: 'discountId',
  discountName: 'discountName',
  discountType: 'discountType',
  discountValue: 'discountValue',
  discountAmount: 'discountAmount',
  discountRewardType: 'discountRewardType',
  pointUsed: 'pointUsed',
  staffId: 'staffId',
  lastPointsAccumulation: 'lastPointsAccumulation'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  orderId: 'orderId',
  productId: 'productId',
  productName: 'productName',
  productPrice: 'productPrice',
  qty: 'qty',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  productCategoryId: 'productCategoryId',
  name: 'name',
  description: 'description',
  price: 'price',
  type: 'type',
  stock: 'stock',
  sku: 'sku',
  imageUrl: 'imageUrl',
  alias: 'alias',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  parentId: 'parentId',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExpenseCategoryScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  code: 'code',
  isPrivate: 'isPrivate',
  createdAt: 'createdAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  isShow: 'isShow',
  tenantId: 'tenantId',
  expenseCategoryId: 'expenseCategoryId',
  staffId: 'staffId',
  description: 'description',
  amount: 'amount',
  paidAt: 'paidAt',
  attachmentUrl: 'attachmentUrl',
  createdAt: 'createdAt',
  paymentType: 'paymentType',
  payrollDetailId: 'payrollDetailId'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  tenantId: 'tenantId',
  action: 'action',
  createdAt: 'createdAt',
  data: 'data'
};

exports.Prisma.TenantSettingScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  showDiscount: 'showDiscount',
  showTax: 'showTax',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  pricePerMonth: 'pricePerMonth',
  pricePerYear: 'pricePerYear',
  isBetaTest: 'isBetaTest',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customLimits: 'customLimits'
};

exports.Prisma.TenantSubscriptionScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  planId: 'planId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customLimits: 'customLimits'
};

exports.Prisma.TenantSubscriptionHistoryScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  planId: 'planId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  snapToken: 'snapToken',
  customLimits: 'customLimits'
};

exports.Prisma.SubscriptionPaymentScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  tenantSubscriptionHistoryId: 'tenantSubscriptionHistoryId',
  midtransOrderId: 'midtransOrderId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  transactionStatus: 'transactionStatus',
  createdAt: 'createdAt'
};

exports.Prisma.PayrollSettingScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  ump: 'ump',
  normalWorkHoursPerDay: 'normalWorkHoursPerDay',
  normalWorkHoursPerMonth: 'normalWorkHoursPerMonth',
  overtimeRate1: 'overtimeRate1',
  overtimeRate2: 'overtimeRate2',
  overtimeRateWeekend1: 'overtimeRateWeekend1',
  overtimeRateWeekend2: 'overtimeRateWeekend2',
  overtimeRateWeekend3: 'overtimeRateWeekend3',
  overtimeCalculationType: 'overtimeCalculationType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SalaryScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  staffId: 'staffId',
  basicSalary: 'basicSalary',
  fixedAllowance: 'fixedAllowance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  staffId: 'staffId',
  date: 'date',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  totalHours: 'totalHours',
  isWeekend: 'isWeekend',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayrollPeriodScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  isFinalized: 'isFinalized',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayrollDetailScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  payrollPeriodId: 'payrollPeriodId',
  staffId: 'staffId',
  basicSalaryAmount: 'basicSalaryAmount',
  fixedAllowanceAmount: 'fixedAllowanceAmount',
  overtimeHours: 'overtimeHours',
  overtimePay: 'overtimePay',
  bonusAmount: 'bonusAmount',
  deductionsAmount: 'deductionsAmount',
  takeHomePay: 'takeHomePay',
  isPaid: 'isPaid',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffLeaveScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  type: 'type',
  reason: 'reason',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantNotificationConfigScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  provider: 'provider',
  apiToken: 'apiToken',
  apiUrl: 'apiUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationTemplateScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  event: 'event',
  message: 'message',
  isActive: 'isActive',
  isCustom: 'isCustom',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  templateId: 'templateId',
  recipient: 'recipient',
  message: 'message',
  status: 'status',
  response: 'response',
  error: 'error',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.OvertimeCalculationType = exports.$Enums.OvertimeCalculationType = {
  HOURLY: 'HOURLY',
  MONTHLY: 'MONTHLY'
};

exports.SalaryType = exports.$Enums.SalaryType = {
  MONTHLY: 'MONTHLY',
  HOURLY: 'HOURLY'
};

exports.LeaveType = exports.$Enums.LeaveType = {
  SICK: 'SICK',
  LEAVE: 'LEAVE',
  PERMIT: 'PERMIT',
  ABSENT: 'ABSENT',
  OTHER: 'OTHER'
};

exports.NotificationEvent = exports.$Enums.NotificationEvent = {
  ORDER_CREATED: 'ORDER_CREATED',
  ORDER_PAID: 'ORDER_PAID'
};

exports.Prisma.ModelName = {
  User: 'User',
  Tenant: 'Tenant',
  Staff: 'Staff',
  Customer: 'Customer',
  Discount: 'Discount',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Product: 'Product',
  ProductCategory: 'ProductCategory',
  ExpenseCategory: 'ExpenseCategory',
  Expense: 'Expense',
  Log: 'Log',
  TenantSetting: 'TenantSetting',
  SubscriptionPlan: 'SubscriptionPlan',
  TenantSubscription: 'TenantSubscription',
  TenantSubscriptionHistory: 'TenantSubscriptionHistory',
  SubscriptionPayment: 'SubscriptionPayment',
  PayrollSetting: 'PayrollSetting',
  Salary: 'Salary',
  Attendance: 'Attendance',
  PayrollPeriod: 'PayrollPeriod',
  PayrollDetail: 'PayrollDetail',
  StaffLeave: 'StaffLeave',
  TenantNotificationConfig: 'TenantNotificationConfig',
  NotificationTemplate: 'NotificationTemplate',
  NotificationLog: 'NotificationLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
